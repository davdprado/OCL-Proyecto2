/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatic = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,9],$V2=[1,8],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[5,16,17,24,36,37,38,39,40],$V9=[1,23],$Va=[1,37],$Vb=[1,30],$Vc=[1,29],$Vd=[1,28],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[1,45],$Vl=[1,46],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[1,56],$Vw=[1,57],$Vx=[1,58],$Vy=[20,21,22,41,42,43,44,45,46,47,48,49,50,51,52,53,54],$Vz=[5,16,17,24,27,30,31,33,35,36,37,38,39,40],$VA=[20,21,22,53,54],$VB=[1,87],$VC=[20,22],$VD=[1,99],$VE=[1,100],$VF=[1,102],$VG=[1,103],$VH=[1,101],$VI=[1,104],$VJ=[20,21,22,41,42,47,48,49,50,51,52,53,54],$VK=[20,21,22,41,42,43,44,45,47,48,49,50,51,52,53,54],$VL=[20,21,22,47,48,49,50,51,52,53,54],$VM=[17,27,30,31,33,35,36,37,38,39,40];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CUERPO":4,"EOF":5,"DECLARACION":6,"ASIGNACION":7,"METODO":8,"MAIN":9,"CUERPO2":10,"IMPRIMIR":11,"FUNCWHILE":12,"FUNCIF":13,"LLAMADA":14,"BREAKK":15,"ejecutar":16,"identificador":17,"pIzq":18,"VALORESLLAMADA":19,"pDer":20,"pyc":21,"comaa":22,"EXP":23,"tipoVoid":24,"PARAMETROS":25,"llaveIzq":26,"llaveDer":27,"TIPO":28,"igual":29,"sentenciaWhile":30,"sentenciaIf":31,"sentenciaElse":32,"imprimir":33,"CASTEO":34,"romper":35,"tipoDouble":36,"tipoChar":37,"tipoBooleano":38,"tipoInt":39,"tipoString":40,"mas":41,"menos":42,"por":43,"dividido":44,"modular":45,"elevado":46,"igualIgual":47,"mayorQue":48,"menorQue":49,"mayorIgual":50,"menorIgual":51,"diferente":52,"orr":53,"andd":54,"nott":55,"entero":56,"decimall":57,"cadenaaa":58,"caracter":59,"truee":60,"falsee":61,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"ejecutar",17:"identificador",18:"pIzq",20:"pDer",21:"pyc",22:"comaa",24:"tipoVoid",26:"llaveIzq",27:"llaveDer",29:"igual",30:"sentenciaWhile",31:"sentenciaIf",32:"sentenciaElse",33:"imprimir",35:"romper",36:"tipoDouble",37:"tipoChar",38:"tipoBooleano",39:"tipoInt",40:"tipoString",41:"mas",42:"menos",43:"por",44:"dividido",45:"modular",46:"elevado",47:"igualIgual",48:"mayorQue",49:"menorQue",50:"mayorIgual",51:"menorIgual",52:"diferente",53:"orr",54:"andd",55:"nott",56:"entero",57:"decimall",58:"cadenaaa",59:"caracter",60:"truee",61:"falsee"},
productions_: [0,[3,2],[4,2],[4,2],[4,2],[4,2],[4,1],[4,1],[4,1],[4,1],[4,1],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[9,6],[9,5],[19,3],[19,1],[14,5],[14,4],[8,8],[8,7],[25,4],[25,2],[6,5],[6,3],[7,4],[12,7],[13,11],[13,7],[13,9],[11,5],[34,4],[15,2],[28,1],[28,1],[28,1],[28,1],[28,1],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,2],[23,3],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; console.log('Funciono');
break;
case 2: case 3: case 4: case 5: case 11: case 12: case 13: case 14: case 16: case 17:
 $$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 6: case 7: case 8: case 9: case 18: case 19: case 20:
 this.$=[$$[$0]];
break;
case 10: case 25:

											var desc='Este es un error sintáctico: "' + yytext + '", en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column;
											console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
											nuevoError={
												tipo:TIPO_ERROR.SINTACTICO,
												descripcion:desc,
												linea: this._$.first_line,
												col:this._$.first_column
											};
											listaerrores.push(nuevoError);
											this.$=[$$[$0]];
break;
case 15:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 21: case 22: case 23: case 24: case 29:
this.$=[$$[$0]];
break;
case 26:
this.$=INSTRUCCIONES.nuevoMain($$[$0-4], $$[$0-2]);
break;
case 27:
this.$=INSTRUCCIONES.nuevoMain($$[$0-3], []);
break;
case 28:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 30:
this.$=INSTRUCCIONES.nuevaLlamada($$[$0-4], $$[$0-2]);
break;
case 31:
this.$=INSTRUCCIONES.nuevaLlamada($$[$0-3], []);
break;
case 32:
this.$=INSTRUCCIONES.nuevoMetodo($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 33:
this.$=INSTRUCCIONES.nuevoMetodo($$[$0-5],[],$$[$0-1]);
break;
case 34:
$$[$0-3].push(INSTRUCCIONES.nuevoParametro($$[$0-1],$$[$0]));this.$=$$[$0-3];
break;
case 35:
this.$=[INSTRUCCIONES.nuevoParametro($$[$0-1],$$[$0])];
break;
case 36:
 this.$=INSTRUCCIONES.nuevaDeclaracion($$[$0-4],$$[$0-3],$$[$0-1]); 
break;
case 37:
 this.$=INSTRUCCIONES.nuevaDeclaracion($$[$0-2],$$[$0-1],undefined); 
break;
case 38:
this.$=INSTRUCCIONES.nuevaAsignacion($$[$0-3],$$[$0-1]);
break;
case 39:
this.$=INSTRUCCIONES.nuevaWhile($$[$0-4],$$[$0-1]);
break;
case 40:
this.$=INSTRUCCIONES.nuevaIf($$[$0-8],$$[$0-5],$$[$0-1]);
break;
case 41:
this.$=INSTRUCCIONES.nuevaIf($$[$0-4],$$[$0-1],undefined);
break;
case 42:
this.$=INSTRUCCIONES.nuevaIf($$[$0-6],$$[$0-3],[$$[$0]]);
break;
case 43:
 this.$=INSTRUCCIONES.nuevaImprimir($$[$0-2]);
break;
case 45:
this.$=INSTRUCCIONES.nuevoBreak();
break;
case 46:
 this.$=TIPO_DATO.DECIMAL; 
break;
case 47:
 this.$=TIPO_DATO.CARACTER;
break;
case 48:
 this.$=TIPO_DATO.BANDERA; 
break;
case 49:
 this.$=TIPO_DATO.ENTERO;
break;
case 50:
 this.$=TIPO_DATO.CADENA; 
break;
case 51:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.SUMA,$$[$0-2],$$[$0]);
break;
case 52:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.RESTA,$$[$0-2],$$[$0]);
break;
case 53:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MULTIPLICACION,$$[$0-2],$$[$0]);
break;
case 54:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.DIVISION,$$[$0-2],$$[$0]);
break;
case 55:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MODULAR,$$[$0-2],$$[$0]);
break;
case 56:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.POTENCIA,$$[$0-2],$$[$0]);
break;
case 57:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.IGUALIGUAL,$$[$0-2],$$[$0]);
break;
case 58:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MAYOR,$$[$0-2],$$[$0]);
break;
case 59:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MENOR,$$[$0-2],$$[$0]);
break;
case 60:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MAYORIGUAL,$$[$0-2],$$[$0]);
break;
case 61:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MENORIGUAL,$$[$0-2],$$[$0]);
break;
case 62:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.NOIGUAL,$$[$0-2],$$[$0]);
break;
case 63:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.ORR,$$[$0-2],$$[$0]);
break;
case 64:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.ANDD,$$[$0-2],$$[$0]);
break;
case 65:
this.$=INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.NOTT,$$[$0]);
break;
case 66:
this.$=INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.NEGATIVO,$$[$0]);
break;
case 67:
this.$=$$[$0-1]
break;
case 68:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.ENTERO,Number($$[$0]));
break;
case 69:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.DECIMAL,Number($$[$0]));
break;
case 70:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.CADENA,$$[$0]);
break;
case 71:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.CARACTER,$$[$0]);
break;
case 72:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.BANDERA,true);
break;
case 73:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.BANDERA,false);
break;
case 74:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.IDENTIFICADOR,$$[$0]);
break;
}
},
table: [{2:[1,7],3:1,4:2,6:5,7:4,8:3,9:6,16:$V0,17:$V1,24:$V2,28:10,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},{1:[3]},{5:[1,17],6:18,7:19,8:20,9:21,16:$V0,17:$V1,24:$V2,28:10,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),{17:[1,22]},{29:$V9},{17:[1,24]},{17:[1,25]},{17:[2,46]},{17:[2,47]},{17:[2,48]},{17:[2,49]},{17:[2,50]},{1:[2,1]},o($V8,[2,2]),o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),{18:[1,26]},{17:$Va,18:$Vb,23:27,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},{21:[1,39],29:[1,38]},{18:[1,40]},{20:[1,42],25:41,28:43,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},{21:[1,44],41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx},{17:$Va,18:$Vb,23:59,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},{17:$Va,18:$Vb,23:60,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},{17:$Va,18:$Vb,23:61,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},o($Vy,[2,68]),o($Vy,[2,69]),o($Vy,[2,70]),o($Vy,[2,71]),o($Vy,[2,72]),o($Vy,[2,73]),o($Vy,[2,74]),{17:$Va,18:$Vb,23:62,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},o($Vz,[2,37]),{17:$Va,18:$Vb,19:63,20:[1,64],23:65,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},{20:[1,66],22:[1,67]},{26:[1,68]},{17:[1,69]},o($Vz,[2,38]),{17:$Va,18:$Vb,23:70,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},{17:$Va,18:$Vb,23:71,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},{17:$Va,18:$Vb,23:72,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},{17:$Va,18:$Vb,23:73,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},{17:$Va,18:$Vb,23:74,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},{17:$Va,18:$Vb,23:75,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},{17:$Va,18:$Vb,23:76,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},{17:$Va,18:$Vb,23:77,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},{17:$Va,18:$Vb,23:78,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},{17:$Va,18:$Vb,23:79,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},{17:$Va,18:$Vb,23:80,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},{17:$Va,18:$Vb,23:81,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},{17:$Va,18:$Vb,23:82,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},{17:$Va,18:$Vb,23:83,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},o($VA,[2,65],{41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv}),o($Vy,[2,66]),{20:[1,84],41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx},{21:[1,85],41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx},{20:[1,86],22:$VB},{21:[1,88]},o($VC,[2,29],{41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx}),{26:[1,89]},{28:90,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},{2:$VD,6:93,7:92,10:91,11:94,12:95,13:97,14:96,15:98,17:$VE,28:10,30:$VF,31:$VG,33:$VH,35:$VI,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},o($VC,[2,35]),o($VJ,[2,51],{43:$Vm,44:$Vn,45:$Vo,46:$Vp}),o($VJ,[2,52],{43:$Vm,44:$Vn,45:$Vo,46:$Vp}),o($VK,[2,53],{46:$Vp}),o($VK,[2,54],{46:$Vp}),o($VK,[2,55],{46:$Vp}),o($VK,[2,56]),o($VL,[2,57],{41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp}),o($VL,[2,58],{41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp}),o($VL,[2,59],{41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp}),o($VL,[2,60],{41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp}),o($VL,[2,61],{41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp}),o($VL,[2,62],{41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp}),o([20,21,22,53],[2,63],{41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,54:$Vx}),o($VA,[2,64],{41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv}),o($Vy,[2,67]),o($Vz,[2,36]),{21:[1,105]},{17:$Va,18:$Vb,23:106,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},o($V8,[2,27]),{2:$VD,6:93,7:92,10:107,11:94,12:95,13:97,14:96,15:98,17:$VE,28:10,30:$VF,31:$VG,33:$VH,35:$VI,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},{17:[1,108]},{6:110,7:115,11:111,12:112,13:113,14:114,15:116,17:$VE,27:[1,109],28:10,30:$VF,31:$VG,33:$VH,35:$VI,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},o($VM,[2,18]),o($VM,[2,19]),o($VM,[2,20]),o($VM,[2,21]),o($VM,[2,22]),o($VM,[2,23]),o($VM,[2,24]),o($VM,[2,25]),{18:[1,117],29:$V9},{18:[1,118]},{18:[1,119]},{18:[1,120]},{21:[1,121]},o($V8,[2,26]),o($VC,[2,28],{41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx}),{6:110,7:115,11:111,12:112,13:113,14:114,15:116,17:$VE,27:[1,122],28:10,30:$VF,31:$VG,33:$VH,35:$VI,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},o($VC,[2,34]),o($V8,[2,33]),o($VM,[2,11]),o($VM,[2,12]),o($VM,[2,13]),o($VM,[2,14]),o($VM,[2,15]),o($VM,[2,16]),o($VM,[2,17]),{17:$Va,18:$Vb,19:123,20:[1,124],23:65,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},{17:$Va,18:$Vb,23:125,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},{17:$Va,18:$Vb,23:126,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},{17:$Va,18:$Vb,23:127,42:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,61:$Vj},o($VM,[2,45]),o($V8,[2,32]),{20:[1,128],22:$VB},{21:[1,129]},{20:[1,130],41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx},{20:[1,131],41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx},{20:[1,132],41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx},{21:[1,133]},o($VM,[2,31]),{21:[1,134]},{26:[1,135]},{26:[1,136]},o($VM,[2,30]),o($VM,[2,43]),{2:$VD,6:93,7:92,10:137,11:94,12:95,13:97,14:96,15:98,17:$VE,28:10,30:$VF,31:$VG,33:$VH,35:$VI,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},{2:$VD,6:93,7:92,10:138,11:94,12:95,13:97,14:96,15:98,17:$VE,28:10,30:$VF,31:$VG,33:$VH,35:$VI,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},{6:110,7:115,11:111,12:112,13:113,14:114,15:116,17:$VE,27:[1,139],28:10,30:$VF,31:$VG,33:$VH,35:$VI,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},{6:110,7:115,11:111,12:112,13:113,14:114,15:116,17:$VE,27:[1,140],28:10,30:$VF,31:$VG,33:$VH,35:$VI,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},o($VM,[2,39]),o($VM,[2,41],{32:[1,141]}),{13:143,26:[1,142],31:$VG},{2:$VD,6:93,7:92,10:144,11:94,12:95,13:97,14:96,15:98,17:$VE,28:10,30:$VF,31:$VG,33:$VH,35:$VI,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},o($VM,[2,42]),{6:110,7:115,11:111,12:112,13:113,14:114,15:116,17:$VE,27:[1,145],28:10,30:$VF,31:$VG,33:$VH,35:$VI,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},o($VM,[2,40])],
defaultActions: {12:[2,46],13:[2,47],14:[2,48],15:[2,49],16:[2,50],17:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const TIPO_OPERACION = require('../Arbol/instrucciones').TIPO_OPERACION;
    const TIPO_VALOR = require('../Arbol/instrucciones').TIPO_VALOR;
    const TIPO_INSTRUCCIONES = require('../Arbol/instrucciones').TIPO_INSTRUCCIONES;
    const INSTRUCCIONES = require('../Arbol/instrucciones').INSTRUCCIONES;
    const TIPO_DATO = require('../Arbol/tablaSimbolos').TIPO_DATO;
	const TIPO_ERROR = require('../Arbol/instrucciones').TIPO_ERROR;
	const listaerrores=require('../interprete/interprete').listaerrores; 
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignorar espacios en blanco
break;
case 1://comentario unilinea
break;
case 2://comentario multilinea
break;
case 3:return 60;
break;
case 4:return 61;
break;
case 5:return 41;
break;
case 6:return 42;
break;
case 7:return 43;
break;
case 8:return 44;
break;
case 9:return 46;
break;
case 10:return 45;
break;
case 11:return 47;
break;
case 12:return 52;
break;
case 13:return 51;
break;
case 14:return 50;
break;
case 15:return 29;
break;
case 16:return 55;
break;
case 17:return 'dosPuntos';
break;
case 18:return 21;
break;
case 19:return 48;
break;
case 20:return 49;
break;
case 21:return 'pregunta';
break;
case 22:return 'punto';
break;
case 23:return 53;
break;
case 24:return 54;
break;
case 25:return 18;
break;
case 26:return 20;
break;
case 27:return 26;
break;
case 28:return 27;
break;
case 29:return 'corIzq';
break;
case 30:return 'corDer';
break;
case 31:return 'nuevo';
break;
case 32:return 'listaa';
break;
case 33:return 'punto';
break;
case 34:return 22;
break;
case 35:return 'agregar';
break;
case 36:return 31;
break;
case 37:return 32;
break;
case 38:return 33;
break;
case 39:return 'sentenciaSwitch';
break;
case 40:return 'casoo';
break;
case 41:return 35;
break;
case 42:return 'defectoo';
break;
case 43:return 30;
break;
case 44:return 'sentenciaDo';
break;
case 45:return 'sentenciaFor';
break;
case 46:return 'continuar';
break;
case 47:return 'retornar';
break;
case 48:return 24;
break;
case 49:return 16;
break;
case 50:return 'toMinusculas';
break;
case 51:return 'toMayus';
break;
case 52:return 'tamanoo';
break;
case 53:return 'f_truncate';
break;
case 54:return 'redondear';
break;
case 55:return 'retTipo';
break;
case 56:return 'toTexto';
break;
case 57:return 'toCaracter';
break;
case 58:return 39;
break;
case 59:return 36;
break;
case 60:return 38;
break;
case 61:return 37;
break;
case 62:return 40;
break;
case 63:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 58;
break;
case 64:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 59
break;
case 65:return 56;
break;
case 66:return 57;
break;
case 67:return 17;
break;
case 68:return 5;
break;
case 69:console.log('Error Lexico: '+yy_.yytext+' en la linea '+ yy_.yylloc.first_line + ' en la columna '+ yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:!)/i,/^(?::)/i,/^(?:;)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\?)/i,/^(?:\.)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:print\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:exec\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"])/i,/^(?:'([^\']|\\n|\\r|\\t)')/i,/^(?:[0-9]+)/i,/^(?:[0-9]+(\.[  |0-9]+)?)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatic;
exports.Parser = gramatic.Parser;
exports.parse = function () { return gramatic.parse.apply(gramatic, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}