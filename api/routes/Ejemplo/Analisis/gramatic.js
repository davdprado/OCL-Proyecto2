/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatic = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,8],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[5,19,20,27,49,50,51,52,53],$V9=[1,28],$Va=[5,19,20,27,30,32,37,38,39,41,43,45,46,48,49,50,51,52,53],$Vb=[1,42],$Vc=[1,35],$Vd=[1,34],$Ve=[1,33],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,39],$Vj=[1,40],$Vk=[1,41],$Vl=[1,50],$Vm=[1,51],$Vn=[1,52],$Vo=[1,53],$Vp=[1,54],$Vq=[1,55],$Vr=[1,56],$Vs=[1,57],$Vt=[1,58],$Vu=[1,59],$Vv=[1,60],$Vw=[1,61],$Vx=[1,62],$Vy=[1,63],$Vz=[23,24,25,44,54,55,56,57,58,59,60,61,62,63,64,65,66,67],$VA=[1,73],$VB=[23,25],$VC=[23,24,25,44,66,67],$VD=[1,103],$VE=[1,109],$VF=[1,105],$VG=[1,108],$VH=[1,106],$VI=[1,110],$VJ=[1,104],$VK=[1,107],$VL=[1,111],$VM=[23,24,25,44,54,55,60,61,62,63,64,65,66,67],$VN=[23,24,25,44,54,55,56,57,58,60,61,62,63,64,65,66,67],$VO=[23,24,25,44,60,61,62,63,64,65,66,67],$VP=[20,30,32,37,38,39,41,43,45,46,48,49,50,51,52,53],$VQ=[30,43,45];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CUERPO":4,"EOF":5,"DECLARACION":6,"ASIGNACION":7,"METODO":8,"MAIN":9,"CUERPO2":10,"IMPRIMIR":11,"FUNCWHILE":12,"FUNCIF":13,"LLAMADA":14,"BREAKK":15,"FUNCDOWHILE":16,"CICLOFOR":17,"FUNCSWITCH":18,"ejecutar":19,"identificador":20,"pIzq":21,"VALORESLLAMADA":22,"pDer":23,"pyc":24,"comaa":25,"EXP":26,"tipoVoid":27,"PARAMETROS":28,"llaveIzq":29,"llaveDer":30,"TIPO":31,"sentenciaFor":32,"IFOR":33,"ASIG":34,"DECLA":35,"igual":36,"sentenciaWhile":37,"sentenciaDo":38,"sentenciaIf":39,"sentenciaElse":40,"sentenciaSwitch":41,"CASOS":42,"defectoo":43,"dosPuntos":44,"casoo":45,"imprimir":46,"CASTEO":47,"romper":48,"tipoDouble":49,"tipoChar":50,"tipoBooleano":51,"tipoInt":52,"tipoString":53,"mas":54,"menos":55,"por":56,"dividido":57,"modular":58,"elevado":59,"igualIgual":60,"mayorQue":61,"menorQue":62,"mayorIgual":63,"menorIgual":64,"diferente":65,"orr":66,"andd":67,"nott":68,"entero":69,"decimall":70,"cadenaaa":71,"caracter":72,"truee":73,"falsee":74,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:"ejecutar",20:"identificador",21:"pIzq",23:"pDer",24:"pyc",25:"comaa",27:"tipoVoid",29:"llaveIzq",30:"llaveDer",32:"sentenciaFor",36:"igual",37:"sentenciaWhile",38:"sentenciaDo",39:"sentenciaIf",40:"sentenciaElse",41:"sentenciaSwitch",43:"defectoo",44:"dosPuntos",45:"casoo",46:"imprimir",48:"romper",49:"tipoDouble",50:"tipoChar",51:"tipoBooleano",52:"tipoInt",53:"tipoString",54:"mas",55:"menos",56:"por",57:"dividido",58:"modular",59:"elevado",60:"igualIgual",61:"mayorQue",62:"menorQue",63:"mayorIgual",64:"menorIgual",65:"diferente",66:"orr",67:"andd",68:"nott",69:"entero",70:"decimall",71:"cadenaaa",72:"caracter",73:"truee",74:"falsee"},
productions_: [0,[3,2],[4,2],[4,2],[4,2],[4,2],[4,1],[4,1],[4,1],[4,1],[4,1],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[9,6],[9,5],[22,3],[22,1],[14,5],[14,4],[8,8],[8,7],[28,4],[28,2],[17,11],[33,1],[33,1],[6,2],[35,4],[35,2],[7,2],[34,3],[12,7],[16,9],[13,11],[13,7],[13,9],[18,7],[18,10],[18,9],[42,5],[42,4],[11,5],[47,4],[15,2],[31,1],[31,1],[31,1],[31,1],[31,1],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,2],[26,3],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; console.log('Funciono');
break;
case 2: case 3: case 4: case 5: case 11: case 12: case 13: case 14: case 16: case 17: case 18:
 $$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 6: case 7: case 8: case 9: case 23: case 24: case 25: case 26:
 this.$=[$$[$0]];
break;
case 10: case 31:

											var desc='Este es un error sintáctico: "' + yytext + '", en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column;
											console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
											nuevoError={
												tipo:TIPO_ERROR.SINTACTICO,
												descripcion:desc,
												linea: this._$.first_line,
												col:this._$.first_column
											};
											listaerrores.push(nuevoError);
											this.$=[$$[$0]];
break;
case 15:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 27: case 28: case 29: case 30: case 35:
this.$=[$$[$0]];
break;
case 32:
this.$=INSTRUCCIONES.nuevoMain($$[$0-4], $$[$0-2]);
break;
case 33:
this.$=INSTRUCCIONES.nuevoMain($$[$0-3], []);
break;
case 34:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 36:
this.$=INSTRUCCIONES.nuevaLlamada($$[$0-4], $$[$0-2]);
break;
case 37:
this.$=INSTRUCCIONES.nuevaLlamada($$[$0-3], []);
break;
case 38:
listasimbolos.push(addSimbolo($$[$0-7],TIPO_INSTRUCCIONES.METODO,$$[$0-6],this._$.first_line,this._$.first_column));this.$=INSTRUCCIONES.nuevoMetodo($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 39:
listasimbolos.push(addSimbolo($$[$0-6],TIPO_INSTRUCCIONES.METODO,$$[$0-5],this._$.first_line,this._$.first_column));this.$=INSTRUCCIONES.nuevoMetodo($$[$0-5],[],$$[$0-1]);
break;
case 40:
$$[$0-3].push(INSTRUCCIONES.nuevoParametro($$[$0-1],$$[$0]));listasimbolos.push(addSimbolo($$[$0-1],'INST_PARAMETRO',$$[$0],this._$.first_line,this._$.first_column));this.$=$$[$0-3];
break;
case 41:
listasimbolos.push(addSimbolo($$[$0-1],'INST_PARAMETRO',$$[$0],this._$.first_line,this._$.first_column));this.$=[INSTRUCCIONES.nuevoParametro($$[$0-1],$$[$0])];
break;
case 45: case 48: case 84:
this.$=$$[$0-1]
break;
case 46:
listasimbolos.push(addSimbolo($$[$0-3],'VARIABLE',$$[$0-2],this._$.first_line,this._$.first_column)); this.$=INSTRUCCIONES.nuevaDeclaracion($$[$0-3],$$[$0-2],$$[$0]); 
break;
case 47:
listasimbolos.push(addSimbolo($$[$0-1],'VARIABLE',$$[$0],this._$.first_line,this._$.first_column)); this.$=INSTRUCCIONES.nuevaDeclaracion($$[$0-1],$$[$0],undefined); 
break;
case 49:
this.$=INSTRUCCIONES.nuevaAsignacion($$[$0-2],$$[$0]);
break;
case 50:
this.$=INSTRUCCIONES.nuevaWhile($$[$0-4],$$[$0-1]);
break;
case 51:
this.$=INSTRUCCIONES.nuevoDoWhile($$[$0-6],$$[$0-2]);
break;
case 52:
this.$=INSTRUCCIONES.nuevaIf($$[$0-8],$$[$0-5],$$[$0-1]);
break;
case 53:
this.$=INSTRUCCIONES.nuevaIf($$[$0-4],$$[$0-1],undefined);
break;
case 54:
this.$=INSTRUCCIONES.nuevaIf($$[$0-6],$$[$0-3],[$$[$0]]);
break;
case 60:
 this.$=INSTRUCCIONES.nuevaImprimir($$[$0-2]);
break;
case 62:
this.$=INSTRUCCIONES.nuevoBreak();
break;
case 63:
 this.$=TIPO_DATO.DECIMAL; 
break;
case 64:
 this.$=TIPO_DATO.CARACTER;
break;
case 65:
 this.$=TIPO_DATO.BANDERA; 
break;
case 66:
 this.$=TIPO_DATO.ENTERO;
break;
case 67:
 this.$=TIPO_DATO.CADENA; 
break;
case 68:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.SUMA,$$[$0-2],$$[$0]);
break;
case 69:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.RESTA,$$[$0-2],$$[$0]);
break;
case 70:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MULTIPLICACION,$$[$0-2],$$[$0]);
break;
case 71:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.DIVISION,$$[$0-2],$$[$0]);
break;
case 72:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MODULAR,$$[$0-2],$$[$0]);
break;
case 73:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.POTENCIA,$$[$0-2],$$[$0]);
break;
case 74:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.IGUALIGUAL,$$[$0-2],$$[$0]);
break;
case 75:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MAYOR,$$[$0-2],$$[$0]);
break;
case 76:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MENOR,$$[$0-2],$$[$0]);
break;
case 77:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MAYORIGUAL,$$[$0-2],$$[$0]);
break;
case 78:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MENORIGUAL,$$[$0-2],$$[$0]);
break;
case 79:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.NOIGUAL,$$[$0-2],$$[$0]);
break;
case 80:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.ORR,$$[$0-2],$$[$0]);
break;
case 81:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.ANDD,$$[$0-2],$$[$0]);
break;
case 82:
this.$=INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.NOTT,$$[$0]);
break;
case 83:
this.$=INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.NEGATIVO,$$[$0]);
break;
case 85:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.ENTERO,Number($$[$0]));
break;
case 86:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.DECIMAL,Number($$[$0]));
break;
case 87:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.CADENA,$$[$0]);
break;
case 88:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.CARACTER,$$[$0]);
break;
case 89:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.BANDERA,true);
break;
case 90:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.BANDERA,false);
break;
case 91:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.IDENTIFICADOR,$$[$0]);
break;
}
},
table: [{2:[1,7],3:1,4:2,6:5,7:4,8:3,9:6,19:$V0,20:$V1,27:$V2,31:13,34:9,35:10,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},{1:[3]},{5:[1,19],6:20,7:21,8:22,9:23,19:$V0,20:$V1,27:$V2,31:13,34:9,35:10,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),{20:[1,24]},{24:[1,25]},{24:[1,26]},{20:[1,27]},{36:$V9},{20:[1,29]},{20:[2,63]},{20:[2,64]},{20:[2,65]},{20:[2,66]},{20:[2,67]},{1:[2,1]},o($V8,[2,2]),o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),{21:[1,30]},o($Va,[2,48]),o($Va,[2,45]),{21:[1,31]},{20:$Vb,21:$Vc,26:32,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{24:[2,47],36:[1,43]},{23:[1,45],28:44,31:46,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},{20:$Vb,21:$Vc,22:47,23:[1,48],26:49,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},o([23,24],[2,49],{54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy}),{20:$Vb,21:$Vc,26:64,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{20:$Vb,21:$Vc,26:65,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{20:$Vb,21:$Vc,26:66,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},o($Vz,[2,85]),o($Vz,[2,86]),o($Vz,[2,87]),o($Vz,[2,88]),o($Vz,[2,89]),o($Vz,[2,90]),o($Vz,[2,91]),{20:$Vb,21:$Vc,26:67,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{23:[1,68],25:[1,69]},{29:[1,70]},{20:[1,71]},{23:[1,72],25:$VA},{24:[1,74]},o($VB,[2,35],{54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy}),{20:$Vb,21:$Vc,26:75,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{20:$Vb,21:$Vc,26:76,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{20:$Vb,21:$Vc,26:77,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{20:$Vb,21:$Vc,26:78,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{20:$Vb,21:$Vc,26:79,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{20:$Vb,21:$Vc,26:80,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{20:$Vb,21:$Vc,26:81,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{20:$Vb,21:$Vc,26:82,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{20:$Vb,21:$Vc,26:83,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{20:$Vb,21:$Vc,26:84,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{20:$Vb,21:$Vc,26:85,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{20:$Vb,21:$Vc,26:86,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{20:$Vb,21:$Vc,26:87,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{20:$Vb,21:$Vc,26:88,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},o($VC,[2,82],{54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw}),o($Vz,[2,83]),{23:[1,89],54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy},{24:[2,46],54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy},{29:[1,90]},{31:91,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},{2:$VD,6:97,7:96,10:92,11:98,12:99,13:101,14:100,15:102,16:95,17:94,18:93,20:$VE,31:13,32:$VF,34:9,35:10,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},o($VB,[2,41]),{24:[1,112]},{20:$Vb,21:$Vc,26:113,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},o($V8,[2,33]),o($VM,[2,68],{56:$Vn,57:$Vo,58:$Vp,59:$Vq}),o($VM,[2,69],{56:$Vn,57:$Vo,58:$Vp,59:$Vq}),o($VN,[2,70],{59:$Vq}),o($VN,[2,71],{59:$Vq}),o($VN,[2,72],{59:$Vq}),o($VN,[2,73]),o($VO,[2,74],{54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq}),o($VO,[2,75],{54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq}),o($VO,[2,76],{54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq}),o($VO,[2,77],{54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq}),o($VO,[2,78],{54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq}),o($VO,[2,79],{54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq}),o([23,24,25,44,66],[2,80],{54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,67:$Vy}),o($VC,[2,81],{54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw}),o($Vz,[2,84]),{2:$VD,6:97,7:96,10:114,11:98,12:99,13:101,14:100,15:102,16:95,17:94,18:93,20:$VE,31:13,32:$VF,34:9,35:10,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},{20:[1,115]},{6:117,7:122,11:118,12:119,13:120,14:121,15:123,16:124,17:125,18:126,20:$VE,30:[1,116],31:13,32:$VF,34:9,35:10,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},o($VP,[2,21]),o($VP,[2,22]),o($VP,[2,23]),o($VP,[2,24]),o($VP,[2,25]),o($VP,[2,26]),o($VP,[2,27]),o($VP,[2,28]),o($VP,[2,29]),o($VP,[2,30]),o($VP,[2,31]),{21:[1,127]},{21:[1,128]},{29:[1,129]},{21:[1,130]},{21:[1,131]},{21:[1,132],36:$V9},{21:[1,133]},{24:[1,134]},o($V8,[2,32]),o($VB,[2,34],{54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy}),{6:117,7:122,11:118,12:119,13:120,14:121,15:123,16:124,17:125,18:126,20:$VE,30:[1,135],31:13,32:$VF,34:9,35:10,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},o($VB,[2,40]),o($V8,[2,39]),o($VP,[2,11]),o($VP,[2,12]),o($VP,[2,13]),o($VP,[2,14]),o($VP,[2,15]),o($VP,[2,16]),o($VP,[2,17]),o($VP,[2,18]),o($VP,[2,19]),o($VP,[2,20]),{20:$Vb,21:$Vc,26:136,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{20:$V1,31:13,33:137,34:139,35:138,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},{2:$VD,6:97,7:96,10:140,11:98,12:99,13:101,14:100,15:102,16:95,17:94,18:93,20:$VE,31:13,32:$VF,34:9,35:10,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},{20:$Vb,21:$Vc,26:141,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{20:$Vb,21:$Vc,26:142,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{20:$Vb,21:$Vc,22:143,23:[1,144],26:49,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{20:$Vb,21:$Vc,26:145,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},o($VP,[2,62]),o($V8,[2,38]),{23:[1,146],54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy},{24:[1,147]},{24:[2,43]},{24:[2,44]},{6:117,7:122,11:118,12:119,13:120,14:121,15:123,16:124,17:125,18:126,20:$VE,30:[1,148],31:13,32:$VF,34:9,35:10,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},{23:[1,149],54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy},{23:[1,150],54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy},{23:[1,151],25:$VA},{24:[1,152]},{23:[1,153],54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy},{29:[1,154]},{20:$Vb,21:$Vc,26:155,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{37:[1,156]},{24:[1,157]},{29:[1,158]},{24:[1,159]},o($VP,[2,37]),{29:[1,160]},{42:161,43:[1,162],45:[1,163]},{24:[1,164],54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy},{21:[1,165]},o($VP,[2,60]),{2:$VD,6:97,7:96,10:166,11:98,12:99,13:101,14:100,15:102,16:95,17:94,18:93,20:$VE,31:13,32:$VF,34:9,35:10,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},o($VP,[2,36]),{2:$VD,6:97,7:96,10:167,11:98,12:99,13:101,14:100,15:102,16:95,17:94,18:93,20:$VE,31:13,32:$VF,34:9,35:10,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},{30:[1,168],43:[1,169],45:[1,170]},{44:[1,171]},{20:$Vb,21:$Vc,26:172,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{20:$V1,34:173},{20:$Vb,21:$Vc,26:174,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{6:117,7:122,11:118,12:119,13:120,14:121,15:123,16:124,17:125,18:126,20:$VE,30:[1,175],31:13,32:$VF,34:9,35:10,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},{6:117,7:122,11:118,12:119,13:120,14:121,15:123,16:124,17:125,18:126,20:$VE,30:[1,176],31:13,32:$VF,34:9,35:10,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},o($VP,[2,55]),{44:[1,177]},{20:$Vb,21:$Vc,26:178,55:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,74:$Vk},{2:$VD,6:97,7:96,10:179,11:98,12:99,13:101,14:100,15:102,16:95,17:94,18:93,20:$VE,31:13,32:$VF,34:9,35:10,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},{44:[1,180],54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy},{23:[1,181]},{23:[1,182],54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy},o($VP,[2,50]),o($VP,[2,53],{40:[1,183]}),{2:$VD,6:97,7:96,10:184,11:98,12:99,13:101,14:100,15:102,16:95,17:94,18:93,20:$VE,31:13,32:$VF,34:9,35:10,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},{44:[1,185],54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy},{6:117,7:122,11:118,12:119,13:120,14:121,15:123,16:124,17:125,18:126,20:$VE,30:[1,186],31:13,32:$VF,34:9,35:10,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},{2:$VD,6:97,7:96,10:187,11:98,12:99,13:101,14:100,15:102,16:95,17:94,18:93,20:$VE,31:13,32:$VF,34:9,35:10,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},{29:[1,188]},{24:[1,189]},{13:191,29:[1,190],39:$VI},{6:117,7:122,11:118,12:119,13:120,14:121,15:123,16:124,17:125,18:126,20:$VE,30:[1,192],31:13,32:$VF,34:9,35:10,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},{2:$VD,6:97,7:96,10:193,11:98,12:99,13:101,14:100,15:102,16:95,17:94,18:93,20:$VE,31:13,32:$VF,34:9,35:10,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},o($VP,[2,57]),o($VQ,[2,59],{34:9,35:10,31:13,6:117,11:118,12:119,13:120,14:121,7:122,15:123,16:124,17:125,18:126,20:$VE,32:$VF,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7}),{2:$VD,6:97,7:96,10:194,11:98,12:99,13:101,14:100,15:102,16:95,17:94,18:93,20:$VE,31:13,32:$VF,34:9,35:10,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},o($VP,[2,51]),{2:$VD,6:97,7:96,10:195,11:98,12:99,13:101,14:100,15:102,16:95,17:94,18:93,20:$VE,31:13,32:$VF,34:9,35:10,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},o($VP,[2,54]),o($VP,[2,56]),o($VQ,[2,58],{34:9,35:10,31:13,6:117,11:118,12:119,13:120,14:121,7:122,15:123,16:124,17:125,18:126,20:$VE,32:$VF,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7}),{6:117,7:122,11:118,12:119,13:120,14:121,15:123,16:124,17:125,18:126,20:$VE,30:[1,196],31:13,32:$VF,34:9,35:10,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},{6:117,7:122,11:118,12:119,13:120,14:121,15:123,16:124,17:125,18:126,20:$VE,30:[1,197],31:13,32:$VF,34:9,35:10,37:$VG,38:$VH,39:$VI,41:$VJ,46:$VK,48:$VL,49:$V3,50:$V4,51:$V5,52:$V6,53:$V7},o($VP,[2,42]),o($VP,[2,52])],
defaultActions: {14:[2,63],15:[2,64],16:[2,65],17:[2,66],18:[2,67],19:[2,1],138:[2,43],139:[2,44]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    function addSimbolo(tipoValor,tipo,id,fila,columna){
        return {
			id:id,
			tipo:tipo,
			tipoValor:tipoValor,
			fila:fila,
			columna:columna
		}
    }

    const TIPO_OPERACION = require('../Arbol/instrucciones').TIPO_OPERACION;
    const TIPO_VALOR = require('../Arbol/instrucciones').TIPO_VALOR;
    const TIPO_INSTRUCCIONES = require('../Arbol/instrucciones').TIPO_INSTRUCCIONES;
    const INSTRUCCIONES = require('../Arbol/instrucciones').INSTRUCCIONES;
    const TIPO_DATO = require('../Arbol/tablaSimbolos').TIPO_DATO;
	const TIPO_ERROR = require('../Arbol/instrucciones').TIPO_ERROR;
	const listaerrores=require('../interprete/interprete').listaerrores;
	const listasimbolos=require('../interprete/interprete').listasimbolos; 
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignorar espacios en blanco
break;
case 1://comentario unilinea
break;
case 2://comentario multilinea
break;
case 3:return 73;
break;
case 4:return 74;
break;
case 5:return 54;
break;
case 6:return 55;
break;
case 7:return 56;
break;
case 8:return 57;
break;
case 9:return 59;
break;
case 10:return 58;
break;
case 11:return 60;
break;
case 12:return 65;
break;
case 13:return 64;
break;
case 14:return 63;
break;
case 15:return 36;
break;
case 16:return 68;
break;
case 17:return 44;
break;
case 18:return 24;
break;
case 19:return 61;
break;
case 20:return 62;
break;
case 21:return 'pregunta';
break;
case 22:return 'punto';
break;
case 23:return 66;
break;
case 24:return 67;
break;
case 25:return 21;
break;
case 26:return 23;
break;
case 27:return 29;
break;
case 28:return 30;
break;
case 29:return 'corIzq';
break;
case 30:return 'corDer';
break;
case 31:return 'nuevo';
break;
case 32:return 'listaa';
break;
case 33:return 25;
break;
case 34:return 'agregar';
break;
case 35:return 39;
break;
case 36:return 40;
break;
case 37:return 46;
break;
case 38:return 41;
break;
case 39:return 45;
break;
case 40:return 48;
break;
case 41:return 43;
break;
case 42:return 37;
break;
case 43:return 38;
break;
case 44:return 32;
break;
case 45:return 'continuar';
break;
case 46:return 'retornar';
break;
case 47:return 27;
break;
case 48:return 19;
break;
case 49:return 'toMinusculas';
break;
case 50:return 'toMayus';
break;
case 51:return 'tamanoo';
break;
case 52:return 'f_truncate';
break;
case 53:return 'redondear';
break;
case 54:return 'retTipo';
break;
case 55:return 'toTexto';
break;
case 56:return 'toCaracter';
break;
case 57:return 52;
break;
case 58:return 49;
break;
case 59:return 51;
break;
case 60:return 50;
break;
case 61:return 53;
break;
case 62:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 71;
break;
case 63:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 72
break;
case 64:return 70;
break;
case 65:return 69;
break;
case 66:return 20;
break;
case 67:return 5;
break;
case 68:console.log('Error Lexico: '+yy_.yytext+' en la linea '+ yy_.yylloc.first_line + ' en la columna '+ yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:!)/i,/^(?::)/i,/^(?:;)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\?)/i,/^(?:\.)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:,)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:print\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:exec\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"])/i,/^(?:'([^\']|\\n|\\r|\\t)')/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatic;
exports.Parser = gramatic.Parser;
exports.parse = function () { return gramatic.parse.apply(gramatic, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}