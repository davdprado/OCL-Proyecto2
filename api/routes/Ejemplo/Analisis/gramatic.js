/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatic = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,18],$V2=[1,8],$V3=[1,19],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[5,20,21,30,43,59,60,61,62,63],$Va=[1,27],$Vb=[21,24,32,40,45],$Vc=[1,31],$Vd=[1,32],$Ve=[2,52],$Vf=[1,36],$Vg=[5,20,21,30,33,35,43,46,47,48,50,53,55,56,58,59,60,61,62,63],$Vh=[1,50],$Vi=[1,43],$Vj=[1,41],$Vk=[1,40],$Vl=[1,44],$Vm=[1,45],$Vn=[1,46],$Vo=[1,47],$Vp=[1,48],$Vq=[1,49],$Vr=[1,52],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[1,56],$Vw=[1,57],$Vx=[1,58],$Vy=[1,59],$Vz=[24,25],$VA=[1,80],$VB=[1,79],$VC=[1,72],$VD=[1,73],$VE=[1,74],$VF=[1,75],$VG=[1,76],$VH=[1,77],$VI=[1,78],$VJ=[1,81],$VK=[1,82],$VL=[1,83],$VM=[1,84],$VN=[1,85],$VO=[1,86],$VP=[24,25,29,33,41,44,45,54,64,65,66,67,68,69,70,71,72,73,74,75,77],$VQ=[1,104],$VR=[1,111],$VS=[24,29,33],$VT=[24,25,29,33,41,54,74,75],$VU=[1,157],$VV=[1,163],$VW=[1,159],$VX=[1,162],$VY=[1,160],$VZ=[1,164],$V_=[1,158],$V$=[1,161],$V01=[1,165],$V11=[24,29],$V21=[24,25,29,33,41,44,45,54,64,65,70,71,72,73,74,75,77],$V31=[24,25,29,33,41,44,45,54,64,65,66,67,68,70,71,72,73,74,75,77],$V41=[24,25,29,33,41,44,45,54,70,71,72,73,74,75,77],$V51=[21,33,35,43,46,47,48,50,53,55,56,58,59,60,61,62,63],$V61=[1,260],$V71=[33,53,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CUERPO":4,"EOF":5,"DECLARACION":6,"ASIGNACION":7,"METODO":8,"MAIN":9,"CUERPO2":10,"IMPRIMIR":11,"FUNCWHILE":12,"FUNCIF":13,"LLAMADA":14,"BREAKK":15,"FUNCDOWHILE":16,"CICLOFOR":17,"FUNCSWITCH":18,"ANADIR":19,"ejecutar":20,"identificador":21,"pIzq":22,"VALORESLLAMADA":23,"pDer":24,"pyc":25,"punto":26,"agregar":27,"EXP":28,"comaa":29,"tipoVoid":30,"PARAMETROS":31,"llaveIzq":32,"llaveDer":33,"TIPO":34,"sentenciaFor":35,"IFOR":36,"ASIG":37,"DECLA":38,"igual":39,"corIzq":40,"corDer":41,"nuevo":42,"listaa":43,"menorQue":44,"mayorQue":45,"sentenciaWhile":46,"sentenciaDo":47,"sentenciaIf":48,"sentenciaElse":49,"sentenciaSwitch":50,"CASOS":51,"DEFAULTT":52,"casoo":53,"dosPuntos":54,"defectoo":55,"imprimir":56,"CASTEO":57,"romper":58,"tipoDouble":59,"tipoChar":60,"tipoBooleano":61,"tipoInt":62,"tipoString":63,"mas":64,"menos":65,"por":66,"dividido":67,"modular":68,"elevado":69,"igualIgual":70,"mayorIgual":71,"menorIgual":72,"diferente":73,"orr":74,"andd":75,"nott":76,"pregunta":77,"entero":78,"decimall":79,"cadenaaa":80,"caracter":81,"truee":82,"falsee":83,"FUNCIONESESPECIALES":84,"toMinusculas":85,"toMayus":86,"tamanoo":87,"f_truncate":88,"redondear":89,"retTipo":90,"toTexto":91,"toCaracter":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"ejecutar",21:"identificador",22:"pIzq",24:"pDer",25:"pyc",26:"punto",27:"agregar",29:"comaa",30:"tipoVoid",32:"llaveIzq",33:"llaveDer",35:"sentenciaFor",39:"igual",40:"corIzq",41:"corDer",42:"nuevo",43:"listaa",44:"menorQue",45:"mayorQue",46:"sentenciaWhile",47:"sentenciaDo",48:"sentenciaIf",49:"sentenciaElse",50:"sentenciaSwitch",53:"casoo",54:"dosPuntos",55:"defectoo",56:"imprimir",58:"romper",59:"tipoDouble",60:"tipoChar",61:"tipoBooleano",62:"tipoInt",63:"tipoString",64:"mas",65:"menos",66:"por",67:"dividido",68:"modular",69:"elevado",70:"igualIgual",71:"mayorIgual",72:"menorIgual",73:"diferente",74:"orr",75:"andd",76:"nott",77:"pregunta",78:"entero",79:"decimall",80:"cadenaaa",81:"caracter",82:"truee",83:"falsee",85:"toMinusculas",86:"toMayus",87:"tamanoo",88:"f_truncate",89:"redondear",90:"retTipo",91:"toTexto",92:"toCaracter"},
productions_: [0,[3,2],[4,2],[4,2],[4,2],[4,2],[4,1],[4,1],[4,1],[4,1],[4,1],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[9,6],[9,5],[19,7],[23,3],[23,1],[14,5],[14,4],[8,8],[8,7],[8,7],[8,8],[31,4],[31,2],[17,11],[36,1],[36,1],[6,2],[38,4],[38,2],[38,10],[38,10],[38,11],[7,2],[37,3],[37,6],[12,7],[16,9],[13,11],[13,7],[13,9],[18,7],[18,8],[18,7],[51,5],[51,4],[52,3],[11,5],[57,4],[15,2],[34,1],[34,1],[34,1],[34,1],[34,1],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,2],[28,5],[28,1],[28,3],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,4],[28,6],[84,4],[84,4],[84,4],[84,4],[84,4],[84,4],[84,4],[84,4],[84,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; console.log('Funciono');
break;
case 2: case 3: case 4: case 5: case 11: case 12: case 13: case 14: case 16: case 17: case 18: case 19: case 20: case 21:
 $$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 6: case 7: case 8: case 9: case 22: case 23: case 24: case 25: case 26: case 27:
 this.$=[$$[$0]];
break;
case 10: case 33:

											var desc='Este es un error sintáctico: "' + yytext + '", en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column;
											console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
											nuevoError={
												tipo:TIPO_ERROR.SINTACTICO,
												descripcion:desc,
												linea: this._$.first_line,
												col:this._$.first_column
											};
											listaerrores.push(nuevoError);
											this.$=[$$[$0]];
break;
case 15:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 28: case 29: case 30: case 31: case 32: case 38:
this.$=[$$[$0]];
break;
case 34:
this.$=INSTRUCCIONES.nuevoMain($$[$0-4], $$[$0-2]);
break;
case 35:
this.$=INSTRUCCIONES.nuevoMain($$[$0-3], []);
break;
case 36:
this.$=INSTRUCCIONES.agregarLista($$[$0-6],$$[$0-2]);
break;
case 37:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 39:
this.$=INSTRUCCIONES.nuevaLlamada($$[$0-4], $$[$0-2]);
break;
case 40:
this.$=INSTRUCCIONES.nuevaLlamada($$[$0-3], []);
break;
case 41:
listasimbolos.push(addSimbolo($$[$0-7],TIPO_INSTRUCCIONES.METODO,$$[$0-6],this._$.first_line,this._$.first_column));this.$=INSTRUCCIONES.nuevoMetodo($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 42:
listasimbolos.push(addSimbolo($$[$0-6],TIPO_INSTRUCCIONES.METODO,$$[$0-5],this._$.first_line,this._$.first_column));this.$=INSTRUCCIONES.nuevoMetodo($$[$0-5],[],$$[$0-1]);
break;
case 43:
listasimbolos.push(addSimbolo($$[$0-6],TIPO_INSTRUCCIONES.METODO,$$[$0-5],this._$.first_line,this._$.first_column));
break;
case 44:
listasimbolos.push(addSimbolo($$[$0-7],TIPO_INSTRUCCIONES.METODO,$$[$0-6],this._$.first_line,this._$.first_column));
break;
case 45:
$$[$0-3].push(INSTRUCCIONES.nuevoParametro($$[$0-1],$$[$0]));listasimbolos.push(addSimbolo($$[$0-1],'INST_PARAMETRO',$$[$0],this._$.first_line,this._$.first_column));this.$=$$[$0-3];
break;
case 46:
listasimbolos.push(addSimbolo($$[$0-1],'INST_PARAMETRO',$$[$0],this._$.first_line,this._$.first_column));this.$=[INSTRUCCIONES.nuevoParametro($$[$0-1],$$[$0])];
break;
case 47:
this.$=INSTRUCCIONES.nuevoFor($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 48: case 49:
this.$=$$[$0]
break;
case 50: case 56:
this.$=$$[$0-1]
break;
case 51:
listasimbolos.push(addSimbolo($$[$0-3],'VARIABLE',$$[$0-2],this._$.first_line,this._$.first_column)); this.$=INSTRUCCIONES.nuevaDeclaracion($$[$0-3],$$[$0-2],$$[$0]); 
break;
case 52:
listasimbolos.push(addSimbolo($$[$0-1],'VARIABLE',$$[$0],this._$.first_line,this._$.first_column)); this.$=INSTRUCCIONES.nuevaDeclaracion($$[$0-1],$$[$0],undefined); 
break;
case 53: case 54:
listasimbolos.push(addSimbolo($$[$0-9],'ARREGLO',$$[$0-6],this._$.first_line,this._$.first_column)); 
break;
case 55:
listasimbolos.push(addSimbolo($$[$0-9],'LISTA',$$[$0-6],this._$.first_line,this._$.first_column)); this.$=INSTRUCCIONES.nuevaLista($$[$0-8],$$[$0-6],undefined); 
break;
case 57:
this.$=INSTRUCCIONES.nuevaAsignacion($$[$0-2],$$[$0]);
break;
case 59:
this.$=INSTRUCCIONES.nuevaWhile($$[$0-4],$$[$0-1]);
break;
case 60:
this.$=INSTRUCCIONES.nuevoDoWhile($$[$0-6],$$[$0-2]);
break;
case 61:
this.$=INSTRUCCIONES.nuevaIf($$[$0-8],$$[$0-5],$$[$0-1]);
break;
case 62:
this.$=INSTRUCCIONES.nuevaIf($$[$0-4],$$[$0-1],undefined);
break;
case 63:
this.$=INSTRUCCIONES.nuevaIf($$[$0-6],$$[$0-3],[$$[$0]]);
break;
case 64:
this.$=INSTRUCCIONES.nuevoSwitch($$[$0-4],$$[$0-1],undefined);
break;
case 65:
this.$=INSTRUCCIONES.nuevoSwitch($$[$0-5],$$[$0-2],$$[$0-1]);
break;
case 66:
this.$=INSTRUCCIONES.nuevoSwitch($$[$0-4],[],$$[$0-1]);
break;
case 67:
$$[$0-4].push(INSTRUCCIONES.nuevoCase($$[$0-2],$$[$0]));this.$=$$[$0-4];
break;
case 68:
this.$=[INSTRUCCIONES.nuevoCase($$[$0-2],$$[$0])];
break;
case 69:
this.$=INSTRUCCIONES.nuevoDefault($$[$0]);
break;
case 70:
 this.$=INSTRUCCIONES.nuevaImprimir($$[$0-2]);
break;
case 71:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.CASTEO,$$[$0-2],$$[$0]);
break;
case 72:
this.$=INSTRUCCIONES.nuevoBreak();
break;
case 73:
 this.$=TIPO_DATO.DECIMAL; 
break;
case 74:
 this.$=TIPO_DATO.CARACTER;
break;
case 75:
 this.$=TIPO_DATO.BANDERA; 
break;
case 76:
 this.$=TIPO_DATO.ENTERO;
break;
case 77:
 this.$=TIPO_DATO.CADENA; 
break;
case 78:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.SUMA,$$[$0-2],$$[$0]);
break;
case 79:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.RESTA,$$[$0-2],$$[$0]);
break;
case 80:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MULTIPLICACION,$$[$0-2],$$[$0]);
break;
case 81:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.DIVISION,$$[$0-2],$$[$0]);
break;
case 82:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MODULAR,$$[$0-2],$$[$0]);
break;
case 83:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.POTENCIA,$$[$0-2],$$[$0]);
break;
case 84:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.IGUALIGUAL,$$[$0-2],$$[$0]);
break;
case 85:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MAYOR,$$[$0-2],$$[$0]);
break;
case 86:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MENOR,$$[$0-2],$$[$0]);
break;
case 87:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MAYORIGUAL,$$[$0-2],$$[$0]);
break;
case 88:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MENORIGUAL,$$[$0-2],$$[$0]);
break;
case 89:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.NOIGUAL,$$[$0-2],$$[$0]);
break;
case 90:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.ORR,$$[$0-2],$$[$0]);
break;
case 91:
this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.ANDD,$$[$0-2],$$[$0]);
break;
case 92:
this.$=INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.NOTT,$$[$0]);
break;
case 93:
this.$=INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.NEGATIVO,$$[$0]);
break;
case 94:
this.$=INSTRUCCIONES.nuevoTernario(TIPO_OPERACION.TERNARIO,$$[$0-4],$$[$0-2],$$[$0]);
break;
case 95: case 104:
this.$=$$[$0];
break;
case 96:
this.$=$$[$0-1];
break;
case 97:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.ENTERO,Number($$[$0]));
break;
case 98:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.DECIMAL,Number($$[$0]));
break;
case 99:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.CADENA,$$[$0]);
break;
case 100:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.CARACTER,$$[$0]);
break;
case 101:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.BANDERA,true);
break;
case 102:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.BANDERA,false);
break;
case 103:
this.$=INSTRUCCIONES.nuevoValor(TIPO_VALOR.IDENTIFICADOR,$$[$0]);
break;
case 107:
this.$=INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.TOLOWERR,$$[$0-1]);
break;
case 108:
this.$=INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.TOUPPERR,$$[$0-1]);
break;
case 109:
this.$=INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.LENGTHH,$$[$0-1]);
break;
case 110:
this.$=INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.TRUNCATEE,$$[$0-1]);
break;
case 111:
this.$=INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.ROUNDD,$$[$0-1]);
break;
case 112:
this.$=INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.TIPODE,$$[$0-1]);
break;
case 113:
this.$=INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.TOTEXTO,$$[$0-1]);
break;
}
},
table: [{2:[1,7],3:1,4:2,6:5,7:4,8:3,9:6,20:$V0,21:$V1,30:$V2,34:9,37:10,38:11,43:$V3,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{1:[3]},{5:[1,20],6:21,7:22,8:23,9:24,20:$V0,21:$V1,30:$V2,34:9,37:10,38:11,43:$V3,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),o($V9,[2,10]),{21:[1,25]},{21:[1,26],40:$Va},{25:[1,28]},{25:[1,29]},{21:[1,30]},o($Vb,[2,73]),o($Vb,[2,74]),o($Vb,[2,75]),o($Vb,[2,76]),o($Vb,[2,77]),{39:$Vc,40:$Vd},{44:[1,33]},{1:[2,1]},o($V9,[2,2]),o($V9,[2,3]),o($V9,[2,4]),o($V9,[2,5]),{22:[1,34]},{22:[1,35],25:$Ve,39:$Vf},{41:[1,37]},o($Vg,[2,56]),o($Vg,[2,50]),{22:[1,38]},{21:$Vh,22:$Vi,28:39,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:60,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{34:61,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{24:[1,63],31:62,34:64,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{24:[1,65],31:66,34:64,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{21:$Vh,22:$Vi,28:67,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:[1,68]},{21:$Vh,22:$Vi,23:69,24:[1,70],28:71,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},o($Vz,[2,57],{44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO}),{21:$Vh,22:$Vi,28:87,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:88,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},o($VP,[2,95]),{21:$Vh,22:$Vi,28:89,34:90,57:42,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},o($VP,[2,97]),o($VP,[2,98]),o($VP,[2,99]),o($VP,[2,100]),o($VP,[2,101]),o($VP,[2,102]),o($VP,[2,103],{22:[1,92],40:[1,91]}),o($VP,[2,104]),{22:[1,93]},{22:[1,94]},{22:[1,95]},{22:[1,96]},{22:[1,97]},{22:[1,98]},{22:[1,99]},{22:[1,100]},{41:[1,101],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},{45:[1,102]},{24:[1,103],29:$VQ},{32:[1,105]},{21:[1,106]},{32:[1,107]},{24:[1,108],29:$VQ},{25:[2,51],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},{39:[1,109]},{24:[1,110],29:$VR},{25:[1,112]},o($VS,[2,38],{44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO}),{21:$Vh,22:$Vi,28:113,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:114,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:115,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:116,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:117,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:118,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:119,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:120,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:121,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:122,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:123,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:124,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:125,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:126,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:127,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},o($VT,[2,92],{44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,77:$VO}),o($VP,[2,93]),{24:[1,128],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},{24:[1,129]},{21:$Vh,22:$Vi,28:130,40:[1,131],57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,23:132,28:71,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:133,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:134,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:135,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:136,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:137,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:138,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:139,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:140,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{39:[1,141]},{21:[1,142]},{32:[1,143]},{34:144,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{2:$VU,6:150,7:149,10:145,11:151,12:152,13:154,14:153,15:155,16:148,17:147,18:146,19:156,21:$VV,34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},o($V11,[2,46]),{2:$VU,6:150,7:149,10:167,11:151,12:152,13:154,14:153,15:155,16:148,17:147,18:146,19:156,21:$VV,34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{32:[1,168]},{42:[1,169]},{25:[1,170]},{21:$Vh,22:$Vi,28:171,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},o($V9,[2,35]),o($V21,[2,78],{66:$VE,67:$VF,68:$VG,69:$VH}),o($V21,[2,79],{66:$VE,67:$VF,68:$VG,69:$VH}),o($V31,[2,80],{69:$VH}),o($V31,[2,81],{69:$VH}),o($V31,[2,82],{69:$VH}),o($V31,[2,83]),o($V41,[2,84],{64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH}),o($V41,[2,85],{64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH}),o($V41,[2,86],{64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH}),o($V41,[2,87],{64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH}),o($V41,[2,88],{64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH}),o($V41,[2,89],{64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH}),o([24,25,29,33,41,54,74],[2,90],{44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,75:$VN,77:$VO}),o($VT,[2,91],{44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,77:$VO}),{44:$VA,45:$VB,54:[1,172],64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},o($VP,[2,96]),{21:$Vh,22:$Vi,28:173,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{41:[1,174],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},{21:$Vh,22:$Vi,28:175,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{24:[1,176],29:$VR},{24:[1,177],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},{24:[1,178],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},{24:[1,179],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},{24:[1,180],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},{24:[1,181],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},{24:[1,182],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},{24:[1,183],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},{24:[1,184],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},{21:$Vh,22:$Vi,28:185,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{39:[1,186]},{2:$VU,6:150,7:149,10:187,11:151,12:152,13:154,14:153,15:155,16:148,17:147,18:146,19:156,21:$VV,34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{21:[1,188]},{6:190,7:195,11:191,12:192,13:193,14:194,15:196,16:197,17:198,18:199,19:200,21:$VV,33:[1,189],34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},o($V51,[2,22]),o($V51,[2,23]),o($V51,[2,24]),o($V51,[2,25]),o($V51,[2,26]),o($V51,[2,27]),o($V51,[2,28]),o($V51,[2,29]),o($V51,[2,30]),o($V51,[2,31]),o($V51,[2,32]),o($V51,[2,33]),{22:[1,201]},{22:[1,202]},{32:[1,203]},{22:[1,204]},{22:[1,205]},{22:[1,206],26:[1,207],39:$Vc,40:$Vd},{22:[1,208]},{25:[1,209]},{21:[1,210],40:$Va},{6:190,7:195,11:191,12:192,13:193,14:194,15:196,16:197,17:198,18:199,19:200,21:$VV,33:[1,211],34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{2:$VU,6:150,7:149,10:212,11:151,12:152,13:154,14:153,15:155,16:148,17:147,18:146,19:156,21:$VV,34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{34:213,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},o($V9,[2,34]),o($VS,[2,37],{44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO}),{21:$Vh,22:$Vi,28:214,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},o($VP,[2,71]),o($VP,[2,105]),{41:[1,215],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},o($VP,[2,115]),o($VP,[2,107]),o($VP,[2,108]),o($VP,[2,109]),o($VP,[2,110]),o($VP,[2,111]),o($VP,[2,112]),o($VP,[2,113]),o($VP,[2,114]),o($Vz,[2,58],{44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO}),{42:[1,216]},{6:190,7:195,11:191,12:192,13:193,14:194,15:196,16:197,17:198,18:199,19:200,21:$VV,33:[1,217],34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},o($V11,[2,45]),o($V9,[2,42]),o($V51,[2,11]),o($V51,[2,12]),o($V51,[2,13]),o($V51,[2,14]),o($V51,[2,15]),o($V51,[2,16]),o($V51,[2,17]),o($V51,[2,18]),o($V51,[2,19]),o($V51,[2,20]),o($V51,[2,21]),{21:$Vh,22:$Vi,28:218,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$V1,34:166,36:219,37:221,38:220,43:$V3,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{2:$VU,6:150,7:149,10:222,11:151,12:152,13:154,14:153,15:155,16:148,17:147,18:146,19:156,21:$VV,34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{21:$Vh,22:$Vi,28:223,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,28:224,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,23:225,24:[1,226],28:71,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{27:[1,227]},{21:$Vh,22:$Vi,28:228,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},o($V51,[2,72]),{25:$Ve,39:$Vf},o($V9,[2,43]),{6:190,7:195,11:191,12:192,13:193,14:194,15:196,16:197,17:198,18:199,19:200,21:$VV,33:[1,229],34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{32:[1,231],40:[1,230]},o([24,25,29,33,41,54,74,75,77],[2,94],{44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL}),{41:[1,232]},{43:[1,233]},o($V9,[2,41]),{24:[1,234],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},{25:[1,235]},{25:[2,48]},{25:[2,49]},{6:190,7:195,11:191,12:192,13:193,14:194,15:196,16:197,17:198,18:199,19:200,21:$VV,33:[1,236],34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{24:[1,237],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},{24:[1,238],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},{24:[1,239],29:$VR},{25:[1,240]},{22:[1,241]},{24:[1,242],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},o($V9,[2,44]),{21:$Vh,22:$Vi,28:243,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{21:$Vh,22:$Vi,23:244,28:71,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},o($VP,[2,106]),{44:[1,245]},{32:[1,246]},{21:$Vh,22:$Vi,28:247,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{46:[1,248]},{25:[1,249]},{32:[1,250]},{25:[1,251]},o($V51,[2,40]),{21:$Vh,22:$Vi,28:252,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{32:[1,253]},{41:[1,254],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},{29:$VR,33:[1,255]},{34:256,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{51:257,52:258,53:[1,259],55:$V61},{25:[1,261],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},{22:[1,262]},o($V51,[2,70]),{2:$VU,6:150,7:149,10:263,11:151,12:152,13:154,14:153,15:155,16:148,17:147,18:146,19:156,21:$VV,34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},o($V51,[2,39]),{24:[1,264],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},{2:$VU,6:150,7:149,10:265,11:151,12:152,13:154,14:153,15:155,16:148,17:147,18:146,19:156,21:$VV,34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{25:[2,53]},{25:[2,54]},{45:[1,266]},{33:[1,267],52:268,53:[1,269],55:$V61},{33:[1,270]},{21:$Vh,22:$Vi,28:271,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{54:[1,272]},{21:$V1,37:273},{21:$Vh,22:$Vi,28:274,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},{6:190,7:195,11:191,12:192,13:193,14:194,15:196,16:197,17:198,18:199,19:200,21:$VV,33:[1,275],34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{25:[1,276]},{6:190,7:195,11:191,12:192,13:193,14:194,15:196,16:197,17:198,18:199,19:200,21:$VV,33:[1,277],34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{25:[2,55]},o($V51,[2,64]),{33:[1,278]},{21:$Vh,22:$Vi,28:279,57:42,65:$Vj,76:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:51,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy},o($V51,[2,66]),{44:$VA,45:$VB,54:[1,280],64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},{2:$VU,6:150,7:149,10:281,11:151,12:152,13:154,14:153,15:155,16:148,17:147,18:146,19:156,21:$VV,34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{24:[1,282]},{24:[1,283],44:$VA,45:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},o($V51,[2,59]),o($V51,[2,36]),o($V51,[2,62],{49:[1,284]}),o($V51,[2,65]),{44:$VA,45:$VB,54:[1,285],64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VO},{2:$VU,6:150,7:149,10:286,11:151,12:152,13:154,14:153,15:155,16:148,17:147,18:146,19:156,21:$VV,34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{6:190,7:195,11:191,12:192,13:193,14:194,15:196,16:197,17:198,18:199,19:200,21:$VV,33:[2,69],34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{32:[1,287]},{25:[1,288]},{13:290,32:[1,289],48:$VZ},{2:$VU,6:150,7:149,10:291,11:151,12:152,13:154,14:153,15:155,16:148,17:147,18:146,19:156,21:$VV,34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},o($V71,[2,68],{37:10,38:11,34:166,6:190,11:191,12:192,13:193,14:194,7:195,15:196,16:197,17:198,18:199,19:200,21:$VV,35:$VW,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8}),{2:$VU,6:150,7:149,10:292,11:151,12:152,13:154,14:153,15:155,16:148,17:147,18:146,19:156,21:$VV,34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},o($V51,[2,60]),{2:$VU,6:150,7:149,10:293,11:151,12:152,13:154,14:153,15:155,16:148,17:147,18:146,19:156,21:$VV,34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},o($V51,[2,63]),o($V71,[2,67],{37:10,38:11,34:166,6:190,11:191,12:192,13:193,14:194,7:195,15:196,16:197,17:198,18:199,19:200,21:$VV,35:$VW,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8}),{6:190,7:195,11:191,12:192,13:193,14:194,15:196,16:197,17:198,18:199,19:200,21:$VV,33:[1,294],34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{6:190,7:195,11:191,12:192,13:193,14:194,15:196,16:197,17:198,18:199,19:200,21:$VV,33:[1,295],34:166,35:$VW,37:10,38:11,43:$V3,46:$VX,47:$VY,48:$VZ,50:$V_,56:$V$,58:$V01,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},o($V51,[2,47]),o($V51,[2,61])],
defaultActions: {20:[2,1],220:[2,48],221:[2,49],254:[2,53],255:[2,54],266:[2,55]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    function addSimbolo(tipoValor,tipo,id,fila,columna){
        return {
			id:id,
			tipo:tipo,
			tipoValor:tipoValor,
			fila:fila,
			columna:columna
		}
    }

    const TIPO_OPERACION = require('../Arbol/instrucciones').TIPO_OPERACION;
    const TIPO_VALOR = require('../Arbol/instrucciones').TIPO_VALOR;
    const TIPO_INSTRUCCIONES = require('../Arbol/instrucciones').TIPO_INSTRUCCIONES;
    const INSTRUCCIONES = require('../Arbol/instrucciones').INSTRUCCIONES;
    const TIPO_DATO = require('../Arbol/tablaSimbolos').TIPO_DATO;
	const TIPO_ERROR = require('../Arbol/instrucciones').TIPO_ERROR;
	const listaerrores=require('../interprete/interprete').listaerrores;
	const listasimbolos=require('../interprete/interprete').listasimbolos; 
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignorar espacios en blanco
break;
case 1://comentario unilinea
break;
case 2://comentario multilinea
break;
case 3:return 82;
break;
case 4:return 83;
break;
case 5:return 64;
break;
case 6:return 65;
break;
case 7:return 66;
break;
case 8:return 67;
break;
case 9:return 69;
break;
case 10:return 68;
break;
case 11:return 70;
break;
case 12:return 73;
break;
case 13:return 72;
break;
case 14:return 71;
break;
case 15:return 39;
break;
case 16:return 76;
break;
case 17:return 54;
break;
case 18:return 25;
break;
case 19:return 45;
break;
case 20:return 44;
break;
case 21:return 77;
break;
case 22:return 26;
break;
case 23:return 74;
break;
case 24:return 75;
break;
case 25:return 22;
break;
case 26:return 24;
break;
case 27:return 32;
break;
case 28:return 33;
break;
case 29:return 40;
break;
case 30:return 41;
break;
case 31:return 42;
break;
case 32:return 43;
break;
case 33:return 29;
break;
case 34:return 27;
break;
case 35:return 48;
break;
case 36:return 49;
break;
case 37:return 56;
break;
case 38:return 50;
break;
case 39:return 53;
break;
case 40:return 58;
break;
case 41:return 55;
break;
case 42:return 46;
break;
case 43:return 47;
break;
case 44:return 35;
break;
case 45:return 'continuar';
break;
case 46:return 'retornar';
break;
case 47:return 30;
break;
case 48:return 20;
break;
case 49:return 85;
break;
case 50:return 86;
break;
case 51:return 87;
break;
case 52:return 88;
break;
case 53:return 89;
break;
case 54:return 90;
break;
case 55:return 91;
break;
case 56:return 92;
break;
case 57:return 62;
break;
case 58:return 59;
break;
case 59:return 61;
break;
case 60:return 60;
break;
case 61:return 63;
break;
case 62:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 80;
break;
case 63:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 81
break;
case 64:return 79;
break;
case 65:return 78;
break;
case 66:return 21;
break;
case 67:return 5;
break;
case 68:console.log('Error Lexico: '+yy_.yytext+' en la linea '+ yy_.yylloc.first_line + ' en la columna '+ yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:!)/i,/^(?::)/i,/^(?:;)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\?)/i,/^(?:\.)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:,)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:print\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:exec\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"])/i,/^(?:'([^\']|\\n|\\r|\\t)')/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatic;
exports.Parser = gramatic.Parser;
exports.parse = function () { return gramatic.parse.apply(gramatic, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}